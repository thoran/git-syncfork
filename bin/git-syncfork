#!/usr/bin/env ruby
# git-syncfork

# 20201022
# 0.2.0

# Notes:
# 1. Assumes that the remote is or will be called 'upstream'.
# 2. Assumes that the upstream is hosted on Github.

# Usage:
# 1. If the upstream remote called upstream doesn't exist, then run git-syncfork with the following arguments:
#  `git syncfork owner/repo`
#   It will create the upstream remote and sync with upstream.
# 2. If the upstream remote called upstream does exist, then run git-syncfork without arguments:
#  `git syncfork`
#   It will sync with upstream.

# Changes since 0.1:
# 1. Checks for the owner and repo being present in ARGV.

gem 'git.rb'

require 'Git/Branch'
require 'Git/Remote'
require 'Kernel/run'

def upstream_owner
  ARGV[0].split('/').first
end

def upstream_repo
  ARGV[0].split('/').last
end

def check_args
  unless ARGV[0] && ARGV[0].match(/\//)
    puts "No upstream owner or repo supplied.  Use the following format: git syncfork owner/repo."
    exit
  end
end

def main
  check_args
  unless Git::Remote.exist?('upstream')
    if upstream_owner && upstream_repo
      run("git remote add upstream git@github.com:#{upstream_owner}/#{upstream_repo}.git")
    else
      puts "There is no remote called upstream and one could not be created."
      puts "Run `git syncfork` again with the upstream Github owner and repo like so:"
      puts "", "`git syncfork owner/repo`"
      exit
    end
  end
  run('git fetch upstream')
  unless Git::Branch.current.master?
    Kernel.run('git checkout master')
  end
  run('git rebase upstream/master')
  run('git push')
  run('git push --tags')
end

main
