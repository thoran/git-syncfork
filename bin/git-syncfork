#!/usr/bin/env ruby
# git-syncfork

# 2020730
# 0.3.1

# Notes:
# 1. Assumes that the remote is or will be called 'upstream'.
# 2. Assumes that the upstream is hosted on Github.
# 3. Pinched some of maybe_create_upstream_remote() from a very similar program I wrote earlier this year called git-spoon.

# Usage:
# 1. If the upstream remote called upstream doesn't exist, then run git-syncfork with the following arguments:
#  `git syncfork owner/repo`
#   It will create the upstream remote and sync with upstream.
# 2. If the upstream remote called upstream does exist, then run git-syncfork without arguments:
#  `git syncfork`
#   It will sync with upstream.

# Changes since 0.2:
# 1. + default_branch()
# 2. ~ main(), so as to make use of default_branch().
# 3. - require 'Kernel/run', since it just isn't really being used.
# 4. ~ main(), so as to remove use of Kernel.run.
# 1: Using default_branch in the rebase
# 5. ~ main(), so that the rebase command uses the default branch
# 6. ~ default_branch() to use Git::Branch.default

gem 'git.rb'

require 'Git/Branch'
require 'Git/Remote'

def upstream_owner
  ARGV[0]&.split('/')&.first
end

def upstream_repo
  ARGV[0]&.split('/')&.last
end

def maybe_create_upstream_remote
  unless Git::Remote.exist?('upstream')
    if upstream_owner && upstream_repo
      url = "git@github.com:#{upstream_owner}/#{upstream_repo}.git"
      Git::Remote.add('upstream', url)
    else
      puts "There is no remote called upstream and one could not be created."
      puts "Run `git syncfork` again with the upstream Github owner and repo like so:"
      puts "", "`git syncfork owner/repo`", ""
      exit
    end
  end
end

def default_branch
  @default_branch ||= Git::Branch.default
end

def main
  maybe_create_upstream_remote
  system('git fetch upstream')
  unless Git::Branch.current.send("#{default_branch}?")
    system('git checkout #{default_branch}')
  end
  system("git rebase upstream/#{default_branch}")
  system('git push')
  system('git push --tags')
end

main
